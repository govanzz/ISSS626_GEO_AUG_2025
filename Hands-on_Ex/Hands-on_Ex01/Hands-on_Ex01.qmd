---
title: "Hands-on Exercise 1"
author: "Gautamgovan"
date: "Aug 20, 2025"
date-modified: "last-modified"
format: 
  html:
    toc: true
    number-sections: true
execute: 
  echo: true
  eval: true
  warning: false
  freeze: true 
---

## Overview

wwww

### Getting Started

Install and launching R packages

The code chunk below uses p_load() of pacman package to check if sf and tidyverse packages are installed in the computer. If they are, then they will be launched into R.

```{r}
pacman::p_load(sf,tidyverse)
```

### Importing Geospatial data

In this section, I have imported the following geospatial data into R by using `st_read()` of the **sf** package:

-   **MP14_SUBZONE_WEB_PL**, a polygon feature layer in ESRI shapefile (`.shp`) format, which I downloaded and extracted into the `geospatial` folder.\
-   **CyclingPath**, a line feature layer in ESRI shapefile (`.shp`) format, which I downloaded and stored in the same `geospatial` folder.\
-   **PreSchools**, a point feature layer in GeoJSON (`.geojson`) format (instead of the KML version), which I also saved into the `geospatial` folder.

#### Importing polygon feature data in shapefile format

The code chunk below uses st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a polygon feature data frame.

```{r}
# Base folder for datasets
gp <- "C:/govanzz/ISSS626_GEO_AUG_2025/Hands-on_Ex/Hands-on_Ex01/data/geospatial"


mpsz <- st_read(dsn = gp, layer = "MP14_SUBZONE_WEB_PL")
```

#### Importing polyline feature data in shapefile form

The code chunk below uses st_read() function of sf package to import CyclingPath shapefile into R as line feature data frame.

```{r}
cyclingpath = st_read(dsn = gp, 
                         layer = "CyclingPathGazette")
```

#### Importing GIS data in kml format

The PreSchoolsLocation is in kml format. The code chunk below will be used to import the kml into R.

```{r}
preschools <- st_read("C:/govanzz/ISSS626_GEO_AUG_2025/Hands-on_Ex/Hands-on_Ex01/data/geospatial/PreSchoolsLocation.kml")
```

### Checking the Content of A Simple Feature Data Frame

#### Working with st_geometry()

```{r}
st_geometry(mpsz)
```

#### Working with glimpse()

```{r}
glimpse(mpsz)
```

glimpse() report reveals the data type of each fields. For example FMEL-UPD_D field is in date data type and X_ADDR, Y_ADDR, SHAPE_L and SHAPE_AREA fields are all in double-precision values. \#### Working with head() In R, the head() function is used to look at the first few rows of a dataset or object.

```{r}
head(mpsz,n=5)
```

### Plotting the Geospatial Data

The plot() function in R is used to quickly visualize data or spatial objects (like shapefiles, points, or polygons) as a simple graph or map.

```{r}
plot(mpsz)
```
The default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. We can, however, choose to plot only the geometry by using the code chunk below.
```{r}
plot(st_geometry(mpsz))
```
Alternatively, we can also choose the plot the sf object by using a specific attribute as shown in the code chunk below.
```{r}
plot(mpsz["PLN_AREA_N"])
```
Now, let us plot the preschool layer ontop of the mpsz layer by using the code chunk below.
```{r}
plot(st_geometry(mpsz))
plot(st_geometry(preschools), 
     add = TRUE)
```
The preschool points failed to plot on top of the mpsz layer because the two layers use different CRS (coordinate reference systems).
### Working with Projection
Map projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.
#### Assigning EPSG code to a simple feature data frame
One of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.
```{r}
st_crs(mpsz)
```
Although mpsz data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be 3414.

In order to assign the correct EPSG code to mpsz data frame, st_set_crs() of sf package is used as shown in the code chunk below.
```{r}
mpsz <- st_set_crs(mpsz, 3414)
st_crs(mpsz)
```
Notice that the EPSG code is 3414 now.
#### Transforming the projection of preschool from wgs84 to svy21.
In geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.
Let us perform the projection transformation by using the code chunk below.
```{r}
preschools <- st_transform(preschools, crs = 3414)
st_geometry(preschools)
```
Notice that it is in svy21 projected coordinate system now.

Now, let us try to plot the preschool layer ontop of mpsz layer again by using the similar code chunk used earlier.
```{r}
plot(st_geometry(mpsz))
plot(st_geometry(preschools), add = TRUE)
```
### Importing and Converting An Aspatial Data
For the purpose of this exercise, the listings.csv data downloaded from AirBnb will be used.
#### Importing the aspatial data
Since listings data set is in csv file format, we will use read_csv() of readr package to import listing.csv as shown the code chunk below.
```{r}
listings <- read_csv("C:/govanzz/ISSS626_GEO_AUG_2025/Hands-on_Ex/Hands-on_Ex01/data/aspatial/listings.csv")
list(listings)
```
Two useful fields we are going to use in the next phase are latitude and longitude.
#### Creating a simple feature data frame from an aspatial data frame
The code chunk below converts listing data frame into a simple feature data frame by using st_as_sf() of sf packages
```{r}
listings_sf <- listings %>%
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326) %>%
  st_transform(crs = 3414)
glimpse(listings_sf)
```
```{r}
# Plot subzone polygons first
plot(st_geometry(mpsz), 
     main = "Airbnb Listings on Subzones of Singapore")

# Add Airbnb listings on top
plot(st_geometry(listings_sf), add = TRUE)
```
### Geoprocessing with sf package
Besides providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data, sf package also offers a wide range of geoprocessing (also known as GIS analysis) functions.

#### Use case 1: Land acquisition analysis
##### The scenario
The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the existing cycling path. We are tasked to determine the extend of the land need to be acquired and their total area.

##### The Solution
To determine the extent of land needed for the cycling path upgrade, we first created 5-meter buffers around the existing cycling paths. After generating the buffers, we calculated their areas and then summed them up to obtain the total land involved in the acquisition, which amounted to 3,561,648 square metres.

To better understand the distribution of the required land, we focused on a specific case in the Tampines West planning subzone. We filtered out this subzone from the master plan and clipped the cycling path buffers within its boundaries. Finally, we plotted the results to visualize the buffered cycling paths inside Tampines West.
```{r}
# 1. Create 5m buffer around cycling paths
buffer_cycling <- st_buffer(cyclingpath, dist = 5, nQuadSegs = 30)

# 2. Calculate buffer area
buffer_cycling <- buffer_cycling %>%
  mutate(AREA = st_area(geometry))

# 3. Total area of land to be acquired
total_area <- sum(buffer_cycling$AREA)
print(total_area)

# 4. Select Tampines West subzone
mpsz_selected <- mpsz %>%
  filter(SUBZONE_N == "TAMPINES WEST")

#transformation
buffer_cycling <- st_transform(buffer_cycling, st_crs(mpsz))


# 5. Clip buffer within Tampines West subzone
buffer_cycling_selected <- st_intersection(buffer_cycling, mpsz_selected)

# 6. Plot results
plot(st_geometry(mpsz_selected), main = "Cycling Path Buffer in Tampines West")
plot(st_geometry(buffer_cycling_selected), col = "lightblue", add = TRUE)
plot(st_geometry(cyclingpath), col = "red", lwd = 2, add = TRUE)
```
#### Use case 2: To determine the number of pre-schools by planning subzone
##### The scenario 
The authority requires a count of pre-schools for each planning subzone to support forward planning. Using R and the sf package, we are going to perform the necessary geoprocessing to compute these counts and present the results clearly.
##### 1.9.2.2 The solution
The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, length() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{r}
mpsz$`PreSch Count`<- lengths(st_intersects(mpsz, preschools))
summary(mpsz$`PreSch Count`)
```
To list the planning subzone with the most number of pre-school, the top_n() of dplyr package is used as shown in the code chunk below.
```{r}
top_n(mpsz, 1, `PreSch Count`)
```
In the code chunk below, another geoprocessing function of sf package called st_area() is used to derive the area of each planning subzone.
```{r}
mpsz$Area <- mpsz %>%
  st_area()
```
Next, mutate() of dplyr package is used to compute the density by using the code chunk below.
```{r}
mpsz <- mpsz %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```
Firstly, we will plot a histogram to reveal the distribution of PreSch Density. Conventionally, hist() of R Graphics will be used as shown in the code chunk below.

```{r}
hist(mpsz$`PreSch Density`)
```
In code chunk below we made changes to improve the quality of the visualisation.
```{r}
ggplot(data=mpsz, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning subzones with a single pre-school, on the other hand, \nthere are seven planning subzones with at least 30 or more pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```
In the code chunk below, appropriate ggplot2 functions are used to plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.
```{r}
ggplot(data=mpsz, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```
